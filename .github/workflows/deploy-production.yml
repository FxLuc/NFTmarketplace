name: deploy-react-client

run-name: Deploy to production by @${{ github.actor }}

on:
  push:
    branches: [ main ]

jobs:
  client:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: client
    steps:
    - uses: actions/checkout@main
    - name: Use Node.js 16.18.1
      uses: actions/setup-node@main
      with:
        node-version: '16.18.1'
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'
    - name: Install dependencies
      run: npm ci
    - name: Test
      run: CI=true npm test
    - name: Build
      run: npm run build-production
  server:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./server
    steps:
    - uses: actions/checkout@main
    - name: Use Node.js 16.18.1
      uses: actions/setup-node@main
      with:
        node-version: '16.18.1'
        cache: 'npm'
        cache-dependency-path: './server/package-lock.json'
    - name: Install dependencies
      run: npm ci
    - name: test the apps
      run: CI=true npm test
  deploy:
    runs-on: ubuntu-20.04
    environment: secrets
    needs: [ client, server ]
    steps:
    - name: Deploy NodeJS app
      uses: appleboy/ssh-action@v0.1.2
      with:
        host: ${{secrets.SSH_HOST}} # IP address of the server you wish to ssh into
        key: ${{secrets.SSH_PRIVATE_KEY}} # Private or public key of the server
        username: ${{ secrets.SSH_USERNAME }} # User of the server you want to ssh into
        script: |
          cd fxnft/source
          git pull -s recursive -X ours
          echo "${{ secrets.ENV_PROD_SERVER }}" > server/.env.production
          echo "${{ secrets.ENV_PROD_CLIENT }}" > client/.env.production
          docker compose -f docker-compose.production.yml up -d
          echo 'Deployment successful to VPS'